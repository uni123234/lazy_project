{
    "projects": [
        {
            "id": 1,
            "technology": "fastapi",
            "project_tree": [
                {
                    "name": "db",
                    "is_folder": true,
                    "children": [
                        {
                            "name": "db.py",
                            "is_folder": false,
                            "content": "from sqlalchemy import create_engine, Column, Integer, String\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\nDATABASE_URL = \"sqlite:///./test.db\"\n\nengine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\nBase = declarative_base()\n\nclass Item(Base):\n    __tablename__ = \"items\"\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String, index=True)\n\nBase.metadata.create_all(bind=engine)\n"
                        },
                        {
                            "name": "__init__.py",
                            "is_folder": false,
                            "content": "from .db import SessionLocal, Base, Item"
                        },
                        {
                            "name": "models",
                            "is_folder": true,
                            "children": [
                                {
                                    "name": "my_model.py",
                                    "is_folder": false,
                                    "content": "from ..db import SessionLocal, Base, Item"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "main",
                    "is_folder": true,
                    "children": [
                        {
                            "name": "__init__.py",
                            "is_folder": false,
                            "content": ""
                        },
                        {
                            "name": "main.py",
                            "is_folder": false,
                            "content": "from fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: str = None):\n    return {\"item_id\": item_id, \"q\": q}\n"
                        }
                    ]
                },
                {
                    "name": "__init__.py",
                    "is_folder": false,
                    "content": ""
                },
                {
                    "name": "run.py",
                    "is_folder": false,
                    "content": "import uvicorn\n\nif __name__ == \"__main__\":\n    uvicorn.run(\"main:app\", host=\"127.0.0.1\", port=8000, reload=True)\n"
                },
                {
                    "name": "requirements.txt",
                    "is_folder": false,
                    "content": "fastapi\nuvicorn\nsqlalchemy\n"
                },
                {
                    "name": ".gitignore",
                    "is_folder": false,
                    "content": "*.pyc\n__pycache__\n.env\n"
                },
                {
                    "name": "Readme.md",
                    "is_folder": false,
                    "content": "## FastAPI API Example\n\nThis project contains a basic FastAPI API with two endpoints:\n\n* `/`: Returns a JSON object with the text \"Hello\": \"World\".\n* `/items/{item_id}`: Takes an `item_id` parameter (integer) and returns a JSON object with the `item_id` and an optional `q` parameter (string).\n\n### Usage\n\n1. Create a project folder.\n2. Create a file named `main.py` and paste the code from `main.py`.\n3. Create a file named `requirements.txt` and add `fastapi uvicorn sqlalchemy`.\n4. Install the dependencies using `pip install -r requirements.txt`.\n5. Run the API using the command `uvicorn main:app --host=127.0.0.1 --port=8000`.\n\n### Additional Information\n\n* FastAPI documentation: https://fastapi.tiangolo.com/tutorial/first-steps/\n* How to write a FastAPI API: https://www.youtube.com/watch?v=SORiTsvnU28\n"
                }
            ]
        },
        {
            "id": 2,
            "technology": "aiogram",
            "project_tree": [
                {
                    "name": "bot.py",
                    "is_folder": false,
                    "content": "from aiogram import Bot, Dispatcher, executor, types\n\nAPI_TOKEN = 'your_token'\n\nbot = Bot(token=API_TOKEN)\ndp = Dispatcher(bot)\n\n@dp.message_handler(commands=['start', 'help'])\nasync def send_welcome(message: types.Message):\n    await message.reply(\"Hello, I'm your bot!\")\n\nif __name__ == '__main__':\n    executor.start_polling(dp, skip_updates=True)\n"
                },
                {
                    "name": "requirements.txt",
                    "is_folder": false,
                    "content": "aiogram\nsqlalchemy\n"
                },
                {
                    "name": ".gitignore",
                    "is_folder": false,
                    "content": "__pycache__\n.env\n"
                },
                {
                    "name": "Readme.md",
                    "is_folder": false,
                    "content": "## aiogram Bot Example\n\nThis project contains a basic aiogram Bot example.\n\n### Usage\n\n1. Create a project folder.\n2. Create a file named `bot.py` and paste the code from `bot.py`.\n3. Create a file named `requirements.txt` and add `aiogram sqlalchemy`.\n4. Install the dependencies using `pip install -r requirements.txt`.\n5. Run the bot using the command `python bot.py`.\n\n### Additional Information\n\n* aiogram documentation: https://docs.aiogram.dev/en/latest/\n"
                },
                {
                    "name": "db",
                    "is_folder": true,
                    "children": [
                        {
                            "name": "db.py",
                            "is_folder": false,
                            "content": "from sqlalchemy import create_engine, Column, Integer, String\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\nDATABASE_URL = \"sqlite:///./test.db\"\n\nengine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\nBase = declarative_base()\n\nclass Item(Base):\n    __tablename__ = \"items\"\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String, index=True)\n\nBase.metadata.create_all(bind=engine)\n"
                        }
                    ]
                }
            ]
        },
        {
            "id": 3,
            "technology": "flask",
            "project_tree": [
                {
                    "name": "main",
                    "is_folder": true,
                    "children": [
                        {
                            "name": "__init__.py",
                            "content": null
                        },
                        {
                            "name": "main.py",
                            "is_folder": false,
                            "content": "from flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello, Flask World!'\n"
                        }
                    ]
                },
                {
                    "name": "run.py",
                    "is_folder": false,
                    "content": "if __name__ == '__main__':\n    app.run(debug=True)\n"
                },
                {
                    "name": "requirements.txt",
                    "is_folder": false,
                    "content": "flask\nsqlalchemy\n"
                },
                {
                    "name": ".gitignore",
                    "is_folder": false,
                    "content": "*.pyc\n__pycache__\n.env\n"
                },
                {
                    "name": "Readme.md",
                    "is_folder": false,
                    "content": "## Flask Example\n\nThis project contains a basic Flask application.\n\n### Usage\n\n1. Create a project folder.\n2. Create a file named `main.py` and paste the code from `main.py`.\n3. Create a file named `requirements.txt` and add `flask sqlalchemy`.\n4. Install the dependencies using `pip install -r requirements.txt`.\n5. Run the application using the command `python main.py`.\n\n### Additional Information\n\n* Flask documentation: https://flask.palletsprojects.com/en/2.0.x/\n"
                },
                {
                    "name": "db",
                    "is_folder": true,
                    "children": [
                        {
                            "name": "__init__.py",
                            "content": "from .db import SessionLocal"
                        },
                        {
                            "name": "db.py",
                            "is_folder": false,
                            "content": "from sqlalchemy import create_engine, Column, Integer, String\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\nDATABASE_URL = \"sqlite:///./test.db\"\n\nengine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\nBase = declarative_base()\n\nclass Item(Base):\n    __tablename__ = \"items\"\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String, index=True)\n\nBase.metadata.create_all(bind=engine)\n"
                        }
                    ]
                }
            ]
        }
    ]
}
